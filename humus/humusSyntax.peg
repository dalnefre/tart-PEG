#
# Syntax of Humus programming language in terms of tokens (cf. humusTokens.peg)
#
        
humus   <- stmt+
block   <- '[' stmt* ']'
stmt    <- 'LET' eqtn !'IN'
         / ('AFTER' expr)? 'SEND' expr 'TO' expr
         / 'CREATE' ident 'WITH' expr
         / 'BECOME' expr
         / 'THROW' expr
         / expr
expr    <- 'LET' eqtn 'IN' expr
         / 'IF' eqtn expr ('ELIF' eqtn expr)* ('ELSE' expr)?
         / 'CASE' expr 'OF' (ptrn ':' expr)+ 'END'
         / term ',' expr
         / term
term    <- 'NEW' term
         / const
         / call
         / '(' expr? ')'
         / ident
call    <- ident '(' expr? ')'
         / '(' expr ')' '(' expr? ')'
eqtn    <- ident '(' ptrn? ')' '=' expr
         / ptrn '=' ptrn
ptrn    <- pterm ',' ptrn
         / pterm
pterm   <- '_'
         / '$' term
         / '(' ptrn? ')'
         / const
         / ident
const   <- block
         / 'SELF'
         / 'NIL'
         / 'TRUE'
         / 'FALSE'
         / '?'
         / '\\' ptrn '.' expr
         / symbol
         / number
         / char
         / string

# Tokens
ident   <- { type:'ident' }
number  <- { type:'number' }
char    <- { type:'char' }
string  <- { type:'string' }
symbol  <- { type:'symbol' }
