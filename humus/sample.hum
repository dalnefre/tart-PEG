#
# Integrated Lamba Calculus example with functional environments
#

LET empty_env = \_.?
LET extend_env(env, name, value) = \lookup.(
#	IF $lookup = $name (value) ELSE (env(lookup))
	CASE lookup OF
	$name : value
	_ : end(lookup)
	END
)

LET const_expr_beh(value) = \(cust, #eval, _).[ 
	SEND value TO cust 
]
LET ident_expr_beh(ident) = \(cust, #eval, env).[
	SEND env(ident) TO cust
]
LET abs_expr_beh(ident, body_expr) = \(cust, #eval, env).[
	CREATE closure WITH \(cust, #apply, arg).[
		SEND (cust, #eval, extend_env(env, ident, arg)) TO body_expr
	]
	SEND closure TO cust
]
LET app_expr_beh(abs_expr, arg_expr) = \(cust, #eval, env).[
	SEND (k_eval, #eval, env) TO abs_expr
	CREATE k_eval WITH \abs.[
		SEND (SELF, #eval, env) TO arg_expr
		BECOME \arg.[
			SEND (cust, #apply, arg) TO abs
		]
	]
]

# (\x.x)(42) -> 42

CREATE example WITH app_expr_beh(
	NEW abs_expr_beh(
		#x,
		NEW ident_expr_beh(#x)
	),
	NEW const_expr_beh(42)
)
SEND (println, #eval, empty_env) TO example
