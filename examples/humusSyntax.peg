#
# Syntax of Humus programming language in terms of tokens (cf. humusTokens.peg)
#
        
humus   <- stmt+
block   <- LBRACK stmt* RBRACK
stmt    <- LET eqtn !IN
         / (AFTER expr)? SEND expr TO expr
         / CREATE ident WITH expr
         / BECOME expr
         / THROW expr
         / expr
expr    <- LET eqtn IN expr
         / IF eqtn expr (ELIF eqtn expr)* (ELSE expr)?
         / CASE expr OF (ptrn COLON expr)+ END
         / term COMMA expr
         / term
term    <- NEW term
         / const
         / call
         / LPAREN expr? RPAREN
         / ident
call    <- ident LPAREN expr? RPAREN
         / LPAREN expr RPAREN LPAREN expr? RPAREN
eqtn    <- ident LPAREN ptrn? RPAREN EQUAL expr
         / ptrn EQUAL ptrn
ptrn    <- pterm COMMA ptrn
         / pterm
pterm   <- IGNORE
         / VALUE term
         / LPAREN ptrn? RPAREN
         / const
         / ident
const   <- block
         / SELF
         / LAMBDA ptrn DOT expr
         / number
         / char
         / string
         / UNDEF
         / NIL
         / TRUE
         / FALSE
         / symbol

# Tokens
LET     <- { type:'name', value:'LET' }
IN      <- { type:'name', value:'IN' }
AFTER   <- { type:'name', value:'AFTER' }
SEND    <- { type:'name', value:'SEND' }
TO      <- { type:'name', value:'TO' }
CREATE  <- { type:'name', value:'CREATE' }
WITH    <- { type:'name', value:'WITH' }
BECOME  <- { type:'name', value:'BECOME' }
THROW   <- { type:'name', value:'THROW' }
IF      <- { type:'name', value:'IF' }
ELIF    <- { type:'name', value:'ELIF' }
ELSE    <- { type:'name', value:'ELSE' }
CASE    <- { type:'name', value:'CASE' }
OF      <- { type:'name', value:'OF' }
END     <- { type:'name', value:'END' }
NEW     <- { type:'name', value:'NEW' }

SELF    <- { type:'name', value:'SELF' }
NIL     <- { type:'name', value:'NIL' }
UNDEF   <- { type:'name', value:'?' }

TRUE    <- { type:'name', value:'TRUE' }
FALSE   <- { type:'name', value:'FALSE' }

IGNORE  <- { type:'name', value:'_' }

LBRACK  <- { type:'punct', value:'[' }
RBRACK  <- { type:'punct', value:']' }
COLON   <- { type:'punct', value:':' }
COMMA   <- { type:'punct', value:',' }
LPAREN  <- { type:'punct', value:'(' }
RPAREN  <- { type:'punct', value:')' }
EQUAL   <- { type:'punct', value:'=' }
VALUE   <- { type:'punct', value:'$' }
LAMBDA  <- { type:'punct', value:'\\' }
DOT     <- { type:'punct', value:'.' }

ident   <- { type:'name' }
number  <- { type:'number' }
char    <- { type:'char' }
string  <- { type:'string' }
symbol  <- { type:'symbol' }
